// // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
// const myArray = [];

// // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// for (let i = 9; i >= 1; i -= 2) {
//     myArray.push(i);
//     console.log(i);
// };
// console.log("üöÄ ~ myArray:", myArray)


// –û–≥–æ–ª–æ—Å—ñ—Ç—å —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ –∑–º—ñ–Ω–Ω—É total –¥–æ 0.
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ü–∏–∫–ª for, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É myArr –¥–æ total.

// // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
// const myArr = [2, 3, 4, 5, 6];

// // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// let total = 0;

// for (let i = 0; i < myArr.length; i += 1) {
//     total += myArr[i];
// }

// console.log(total);

// –ó–º—ñ–Ω—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é multiplyAll —Ç–∞–∫, —â–æ–± –ø–æ–≤–µ—Ä—Ç–∞–≤—Å—è –¥–æ–±—É—Ç–æ–∫ —É—Å—ñ—Ö —á–∏—Å–µ–ª —É –ø—ñ–¥–º–∞—Å–∏–≤–∞—Ö arr.

// function multiplyAll(arr) {
//   let product = 1;
//   // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
//     for (let i = 0; i < arr.length; i += 1) {
//         for (let j = 0; j < arr[i].length; j += 1) {
//             console.log(arr[i][j]);;
//             product *= arr[i][j];
//         }
    
// }
//   // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –Ω–∞–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
//   return product;
// }

// ;
// console.log(multiplyAll([[1, 2], [3, 4], [5, 6, 7]]));



// –ó–º—ñ–Ω—ñ—Ç—å —Ü–∏–∫–ª while —É –∫–æ–¥—ñ –Ω–∞ —Ü–∏–∫–ª do...while —Ç–∞–∫,
// —â–æ–± —Ü–∏–∫–ª –ø–µ—Ä–µ–¥–∞–≤–∞–≤ –ª–∏—à–µ —á–∏—Å–ª–æ 10 –¥–æ myArray, —Ç–∞ i –¥–æ—Ä—ñ–≤–Ω—é–≤–∞–ª–∞ 11, –∫–æ–ª–∏ –∫–æ–¥ –∑–∞–∫—ñ–Ω—á–∏—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
// const myArray = [];
// let i = 10;

// // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// do {
//   myArray.push(i);
//   i++;
// } while (i < 10);


// –ù–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é sum(arr, n), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –ø–µ—Ä—à–∏—Ö n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É arr.
// function sum(arr, n) {
  // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
    // if (n <= 0) {
    //     return 0
    // } else {
    //     return sum(arr, n - 1) + arr[n - 1];
    // }
  // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –Ω–∞–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// }
// console.log(sum([1], 0));
// console.log(sum([2, 3, 4], 1));
// console.log(sum([2, 3, 4, 5], 3));


// –ü–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—é
// –£ –Ω–∞—Å —î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, —è–∫—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö –ª—é–¥–µ–π –∑—ñ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.

// –§—É–Ω–∫—Ü—ñ—è lookUpProfile, —è–∫–∞ –ø—Ä–∏–π–º–∞—î name —Ç–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å (prop) —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏,
// –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –≤–∞—Å.

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ name –¥—ñ–π—Å–Ω–æ —î —ñ–º‚Äô—è–º (firstName) –∫–æ–Ω—Ç–∞–∫—Ç—É
// —ñ –Ω–∞–¥–∞–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å(prop) —î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.

// –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ —î —ñ—Å—Ç–∏–Ω–Ω–∏–º–∏, —Ç–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ—î—ó –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ.

// –Ø–∫—â–æ name –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ä—è–¥–æ–∫ No such contact.

// –Ø–∫—â–æ prop –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –∂–æ–¥–Ω–æ—é –¥—ñ–π—Å–Ω–æ—é –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é –∫–æ–Ω—Ç–∞–∫—Ç—É,
// —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î name, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ä—è–¥–æ–∫ No such property.



// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
// const contacts = [
//   {
//     firstName: "Akira",
//     lastName: "Laine",
//     number: "0543236543",
//     likes: ["Pizza", "Coding", "Brownie Points"],
//   },
//   {
//     firstName: "Harry",
//     lastName: "Potter",
//     number: "0994372684",
//     likes: ["Hogwarts", "Magic", "Hagrid"],
//   },
//   {
//     firstName: "Sherlock",
//     lastName: "Holmes",
//     number: "0487345643",
//     likes: ["Intriguing Cases", "Violin"],
//   },
//   {
//     firstName: "Kristian",
//     lastName: "Vos",
//     number: "unknown",
//     likes: ["JavaScript", "Gaming", "Foxes"],
//   },
// ];

// function lookUpProfile(name, prop) {
    // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
//   let contactFound = false;
//   for (const contact of contacts) {
//     if (name === contact.firstName) {
//     contactFound = true;
//       if (contact.hasOwnProperty(prop)) {
//         return contact[prop];
//       } else { return 'No such property'; }
//     }
//   } if (!contactFound) { return 'No such contact'; }
  // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –Ω–∞–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// }

// console.log(lookUpProfile("Kristian", "lastName"));
// console.log(lookUpProfile("Sherlock", "likes"));
// console.log(lookUpProfile("Harry", "likes"));
// console.log(lookUpProfile("Bob", "number"));
// console.log(lookUpProfile("Bob", "potato"));
// console.log(lookUpProfile("Akira", "address"));
// console.log(lookUpProfile("Akira", "likes"));

// function countup(n) {
//   if (n < 1) {
//     return [];
//   } else {
//     const countArray = countup(n - 1);
//     countArray.push(n);
//     return countArray;
//   }
// }
// console.log(countup(10));

// –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –ø—ñ–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// function countdown(n){
//   if (n < 1) {
//     return [];
//   } else {
//     let countArray = countdown(n - 1);
//     countArray.unshift(n);
//     return countArray;
    
//   }
// }
// –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥ –ª–∏—à–µ –Ω–∞–¥ —Ü–∏–º —Ä—è–¥–∫–æ–º
// console.log(countdown(5));

function rangeOfNumbers(startNum, endNum) {
  if (startNum === endNum) {
    return [startNum];
  } else {
    const range = rangeOfNumbers(startNum, endNum - 1)
    range.push(endNum);
    return range;
  }
}
 

console.log(rangeOfNumbers(1, 5));